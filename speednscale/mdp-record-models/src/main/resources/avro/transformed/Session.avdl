@namespace("io.maxplay.mdp.mdp_record_models.transformed")

// Reusable, data model for building Session object model to be used to represent a transformed Session.
protocol MdpRecordProtocol {
    
    /**
     * A structure representing a transformed Session.
     */
    record Session {    
		/**
		 * Event name (Required)
		 */
		string s_event_name;
		 
		/**
		 * client event time (UTC)
		 */
		long s_client_event_time;	
		 		 
		/**
		 * Time zone of client
		 */
		int s_client_time_zone_offset;
		 		 
		/**
		 * device unique identifier provided for vendor (required)
		 */
		string s_device_id;		 
		 		 
		/**
		 * Name of OS platform
		 */
		string s_platform;
		 
		/** 
		 * Full name of OS
		 */
		string s_os_version_full;
		
		/**
		 * External facing IP for device
		 */
		string s_ip_address;
		
		/** 
		 * Determined by external facing IP address. ISO 2 letter country codes
		 */
		string s_country_code;
				 
		/** 
		 * Device model and name of the client
		 */
		string s_device_name;
				 
		/** 
		 * “iPhone6,1” etc. The vendor-specific model variants (major and minor).
		 */
		string s_device_model;
				 
		/** 
		 * Version of binary that is installed on the device
		 */
		string s_game_binary_version;
				 
		/** 
		 * IDFA for iOS, AdvertiserId for Google
		 */
		string s_advertiser_id;
				 
		/** 
		 * Version of SDK generating and sending the telemetry
		 */
		string s_maxplay_sdk_version;
				 
		/** 
		 * Version of game-specific telemetry "schema" being sent.
		 */
		string s_game_telemetry_version;
				 
		/** 
		 * Globally unique identifier for each event sent. Used to de-dupe.
		 */
		string s_guid;
				 
		/** 
		 * Any unique player identifier tied to identity outside game
		 */
		string s_player_identifier;
				 
		/** 
		 * Time s_current session began
		 */
		long s_session_begin_time;
				 
		/** 
		 * Time of first-ever play session
		 */
		long s_first_play_session;
						 
		/** 
		 * Time of most recent play session before this one
		 */
		long s_previous_play_session;
						 
		/** 
		 * Number of consecutive 24-hour periods in which player played
		 */
		int s_consecutive_days_played;
		
		/** 
		 * Total s_in-app-purchase spend (in USD) to date
		 */
		float s_cumulative_in_app_purchase_spend_usd;
					 
		/** 
		 * Time of most recent in-app purchase
		 */
		long s_last_in_app_purchase;
		
		/** 
		 * Total balance of in-game soft currency
		 */
		int s_soft_currency_balance;
						 
		/** 
		 * Total balance of in-game hard currency
		 */
		int s_hard_currency_balance;
								 
		/** 
		 * In-game achievement level or other game-specific indicator of in-game progress (number of map nodes unlocked, etc.)
		 */
		int s_player_level;
								 
		/** 
		 * Count of player's in-app friends
		 */
		int s_player_friend_count;
								 
		/** 
		 * Any segmentation tag associating user with an A/B test bucket
		 */
		string s_a_b_test_segment;
										 
		/** 
		 * How s_session ended
		 */
		string s_session_end_type;
		
		/** 
		 * stage_begin, stage_end
		 * stage_name - Name of level or stage or map node
		 */
		string s_stage_name;

		/** 
		 * stage_begin, stage_end
		 * stage_level Game-specific indicator of stage difficulty or progression level
		 */
		int s_stage_level;

		/** 
		 * stage_begin
		 * stage_begin_type - How or why user began game stage.
		 */
		string s_stage_begin_type;

		/** 
		 * stage_end
		 * stage_end_type - How or why game stage ended.
		 */
		string s_stage_end_type;
		
		/** 
		 * currency_earned, currency_spent
		 * currency_name - Name of in-game currency
		 */
		string s_currency_name;
		
		/** 
		 * currency_earned, currency_spent
		 * currency_type - Hard or soft currency
		 */
		string s_currency_type;
		
		/** 
		 * currency_earned, currency_spent
		 * quantity_earned - Quantity of in-game currency earned
		 */
		int s_quantity_earned;
		
		/** 
		 * currency_earned, currency_spent
		 * how_earned - How currency was earned. (Question: handle item sales/returns separately?)
		 */
		string s_how_earned;
		
		/** 
		 * currency_spent
		 * item_or_powerup_purchased - What item or power-up was purchased, "crafting speedup", "electrum sword", etc.
		 */
		string s_item_or_powerup_purchased;
    }
}				 